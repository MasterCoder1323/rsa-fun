cmake_minimum_required(VERSION 3.15)
project(crusty_project)

# Find the Rust compiler
find_program(RUSTC_EXECUTABLE rustc REQUIRED)

# Determine the target library name based on the OS
if (CMAKE_SYSTEM_NAME MATCHES "Linux")
    set(RUST_LIB_NAME "librsa.so")
elseif (CMAKE_SYSTEM_NAME MATCHES "Darwin")
    set(RUST_LIB_NAME "librsa.dylib")
elseif (CMAKE_SYSTEM_NAME MATCHES "Windows")
    set(RUST_LIB_NAME "librsa.dll")
endif()

# Define the Rust library output path
set(RUST_LIB_OUTPUT "${CMAKE_BINARY_DIR}/${RUST_LIB_NAME}")

# Build the Rust library using rustc
add_custom_target(rust_lib_build
    COMMAND ${RUSTC_EXECUTABLE} --crate-type cdylib ${CMAKE_SOURCE_DIR}/rust/main.rs -o ${RUST_LIB_OUTPUT}
    OUTPUT ${RUST_LIB_OUTPUT}
    WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/rust
)

# Add the C++ executable using cxx
add_executable(crusty cpp/main.cpp)

# Link the C++ executable against the Rust library
target_link_libraries(crusty PRIVATE ${RUST_LIB_OUTPUT})

# Ensure the Rust library is built before the C++ executable is linked
add_dependencies(crusty rust_lib_build)

# (Optional) Add a target to build everything
add_custom_target(all_build
    DEPENDS crusty rust_lib_build
)